{"version":3,"sources":["app/models/Pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/Profile.ts","app/stores/ActivityStore.ts","app/stores/UserStore.ts","app/stores/ProfileStore.ts","app/stores/Store.ts","app/stores/CommonStore.ts","app/stores/ModalStore.ts","app/stores/CommentStore.ts","app/layout/navbar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivitiesDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","Agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","agent","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","tyle","circular","bordered","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","diabled","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","TestError","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.82aafab1.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n    \n    //because class need to create initial values w/ constructor\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n    \n    constructor(pageNumber = 1, pageSize = 4) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}\n\n","import axios, {AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport {Activity, ActivityFormValues} from '../models/activity';\nimport {history} from \"../../index\";\nimport {store} from \"../stores/Store\";\nimport {User, UserFormValues} from \"../models/User\";\nimport {Photo, Profile, UserActivity } from '../models/Profile';\nimport {PaginatedResult} from \"../models/Pagination\";\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n//returns token with every single request when we have a token in our commonStore\naxios.interceptors.request.use(config => {\n        const token = store.commonStore.token;\n        if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n    })\n\naxios.interceptors.response.use(async response => \n    {\n        //sleep for 1 sec if in development mode to simulate server lag\n        if(process.env.NODE_ENV === 'development') await sleep(1000);\n        \n        //adding pagination to axios interceptor\n        const pagination = response.headers['pagination'];\n        if (pagination) {\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n            return response as AxiosResponse<PaginatedResult<any>>;\n        }\n        return response;\n    }, (error: AxiosError) => {\n        const {data, status, config} = error.response!;\n        switch (status) {\n            case 400: \n                if(typeof data == 'string') {\n                    toast.error(data);\n                }\n                if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                    history.push('/not-found');\n                }\n                if(data.errors) {\n                    const modalStateErrors = [];\n                    for (const key in data.errors) {\n                        if (data.errors[key]) {\n                            modalStateErrors.push(data.errors[key])\n                        }\n                    }\n                    throw modalStateErrors.flat();\n                } \n                break;\n            case 401:\n                toast.error('unauthorized');\n                break;\n            case 404:\n                history.push('/not-found');\n                break;\n            case 500:\n                store.commonStore.setServerError(data);\n                history.push('/server-error');\n                break;\n        } \n        return Promise.reject(error);\n    \n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    //paginated list result\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\n    \n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`), \n    updateProfile: (profile:Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst Agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default Agent;","import { Profile } from \"./Profile\";\r\n\r\nexport interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date | null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n        hostUsername: string;\r\n        isCancelled: boolean;\r\n        isGoing: boolean;\r\n        isHost: boolean;\r\n        host?: Profile;\r\n        attendees: Profile[];\r\n    }  \r\n    \r\n    export class Activity implements Activity {\r\n        constructor(init?: ActivityFormValues) {\r\n            //populates all properties that it can into our activity\r\n            Object.assign(this, init);\r\n        }\r\n    }\r\n    \r\n    export class ActivityFormValues {\r\n        id?: string = undefined;\r\n        title: string = '';\r\n        category: string = '';\r\n        description: string = '';\r\n        date: Date | null = null;\r\n        city: string = '';\r\n        venue: string = '';\r\n        \r\n        constructor(activity?: ActivityFormValues) {\r\n                if (activity) {\r\n                    this.id = activity.id;\r\n                    this.title = activity.title;\r\n                    this.category = activity.category;\r\n                    this.description = activity.description;\r\n                    this.date = activity.date;\r\n                    this.city = activity.city;\r\n                    this.venue = activity.venue;\r\n                }\r\n        }\r\n    }","import {User} from \"./User\";\n\nexport interface Profile {\n    username: string,\n    displayName: string,\n    image?: string,\n    bio?: string\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\n//class can be used as type Profile as well as Profile and won't cause confusion\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport {Activity, ActivityFormValues} from \"../models/activity\";\nimport { format } from 'date-fns';\nimport { store } from \"./Store\";\nimport {Profile} from \"../models/Profile\";\nimport {Pagination, PagingParams} from \"../models/Pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    //loop through predicate and set any keys:values that have been set as query string parameters that we can also pass up w/ our axios params\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n        \n        //we want to be able to react to the 'predicate' whenever it changes\n        //don't want to react when initial predicate it set, but whenever it changes we want to react\n        reaction (\n            () => this.predicate.keys(),\n            () => {\n                //resetting these b/c using filtering and don't know whether previously used\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                //taking axios params and loading next batch of activities\n                this.loadActivities();\n            }\n        )\n    }\n    \n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n    \n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                //delete previous startDate\n                this.predicate.delete('startDate');\n                //set new startDate\n                this.predicate.set('startDate', value);\n                \n                \n        }\n    }\n    \n    get axiosParams() {\n        //make sure don't import URLSearchParams from 'url'. Doesn't need to be imported.\n        const params = new URLSearchParams();\n        //pass through to axios\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n        \n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \n        a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n                })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n    \n    //helper method for pagination\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            //some() function returns 'true' if at least one element in the array satisfies the condition\n            //if a user is in the event, flagged as going\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            //create new array[] passing into the attendee objects above\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n        })\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n    \n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            //bang operator because user only can attempt to update activity when they're already inside activity\n            //so activity won't ever be null\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction (() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            });\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n    \n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                //setting this to the opposite of whatever it's been set to\n                //need bang operators to override typescript safety re undefined\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n    \n    //flushes the selectedActivity from memory when navigating to a different activity page to prevent an initial connection error\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n    \n    //helper method to update the attendees inside each activity that we have inside our registry b/c these are activities displayed in UI\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport {User, UserFormValues} from \"../models/User\";\nimport Agent from \"../api/agent\";\nimport {store} from \"./Store\";\nimport {history} from \"../../index\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n    \n    get isLoggedIn() {\n        return!!this.user;\n    }\n    \n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await Agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            //close the modal after the user is logged in\n            store.modalStore.closeModal();\n            console.log(user);\n        } catch (error) {\n            throw error;\n        }        \n    }\n    \n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n    \n    getUser = async () => {\n        try {\n            const user = await Agent.Account.current();\n            runInAction(() => this.user = user); \n        } catch (error) {\n            console.log(error);\n        }\n    }\n    \n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await Agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            //close the modal after the user is logged in\n            store.modalStore.closeModal();\n            console.log(user);\n        } catch (error) {\n            throw error;\n        }\n    }\n    \n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n    \n    //this method with async automatically returns a promise\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n    \n    //also logs any responses in strings from Facebok\n    facebookLogin = () => {\n        this.fbLoading = true;\n        const apiLogin = (accessToken: string) => {\n            Agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token);\n                runInAction(() => {\n                    this.user = user;\n                    this.fbLoading = false;\n                })\n                history.push('/activities');\n            }).catch(error => {\n                console.log(error);\n                runInAction(() => {this.fbLoading = false;\n                })\n            })\n        }\n        if (this.fbAccessToken) {\n            apiLogin(this.fbAccessToken);\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken);\n            }, {scope: 'public_profile,email'})\n        }\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport {Photo, Profile, UserActivity } from \"../models/Profile\";\nimport Agent from \"../api/agent\";\nimport {store} from \"./Store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] =[];\n    loadingActivities = false;\n    \n    constructor() {\n        makeAutoObservable(this);\n        \n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n    \n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n    \n    //returns true if these two usernames match\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        //returns false if no user or profile\n        return false;\n    }\n    \n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await Agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;})\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n    \n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await Agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false)\n        }\n    }\n    \n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await Agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    //marks the existing main photo as no longer a main photo\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    //marks the newly selected photo as the main photo\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false)\n        }\n    }\n    \n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await Agent.Profiles.deletePhoto(photo.id);\n            //not accessing the UserStore.ts here as we're not allowing user to delete their main photo\n            runInAction(() => {\n                if (this.profile) {\n                    //returns an array of all the photos except for the one that matches the id we've presented here for deletion\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false)\n        }\n    }\n    \n    //status for following or unfollowing a user\n    //flip the follow status, basically\n    //following: boolean property is what we're about to set the property is\n    //profile.following --> what the property statement currently is\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await Agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username ) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n           console.log(error); \n           runInAction(() => this.loading = false);\n        }\n    }\n    \n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await Agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n    \n    //predicate is optional because we return the default case if we don't have a predicate\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await Agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./ActivityStore\";\nimport CommonStore from \"./CommonStore\";\nimport UserStore from \"./UserStore\";\nimport ModalStore from \"./ModalStore\";\nimport ProfileStore from \"./ProfileStore\";\nimport CommentStore from \"./CommentStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport {ServerError} from \"../models/ServerError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n    \n    constructor() {\n        makeAutoObservable(this);\n        \n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n    \n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n    \n    setToken = (token: string | null ) => {\n        this.token = token;\n    }\n    \n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n    \n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n    \n    constructor() {\n        makeAutoObservable(this)\n    }\n    \n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n    \n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport {ChatComment} from \"../models/Comment\";\nimport {store} from \"./Store\";\n\n\n//Signal R CommentStore, requires installation of SignalR\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build()\n            \n            this.hubConnection.start().catch(error => console.log(\"Error establishing the SignalR connection.\", error));\n            \n            //this method name 'LoadComments' needs to match exactly what we named in SignalR hub\n            //loads all the comments\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        //need to cast dates not as strings but as Date types for date-fns conversion in ActivityDetailedChat\n                        //need to append 'Z\" for Utc format conversion because for whatever reason Dotnet doesn't format correctly\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n                //receive a single comment -- not array since single comment\n                this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                    runInAction(() => {\n                        //need to cast dates not as strings but as Date types for date-fns conversion in ActivityDetailedChat\n                        //don't need 'Z' because comment is generated client side, which adds 'Z' automatically, unlike server side (.NET)\n                        //unshift(comment) puts comment at the start of the array\n                        comment.createdAt = new Date(comment.createdAt);\n                        this.comments.unshift(comment)\n                    });\n                });\n            \n        }\n    }\n    \n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection.\", error));\n    }\n    \n    clearComments = () => {\n        //reset comments back to empty array\n        this.comments = [];\n        this.stopHubConnection();\n    }\n    \n    //sending a comment\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            //'SendComment' needs to be exact name of method in ChatHub\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    } \n}\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport {useStore} from \"../stores/Store\";\n\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout}} = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src='/assets/Mike Headshot.png' alt='logo' style={{marginRight: '10px'}}/>\n                    SchedulerMike\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name = 'Activities' />\n                <Menu.Item as={NavLink} to='/errors' name = 'Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content = 'Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/> \n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text={'Logout'} icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu> \n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport {useStore} from \"../../../app/stores/Store\";\n\n//make an observer so we can observe values from the store\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                //if we don't have a date, set to today's date \n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport {Profile} from \"../../app/models/Profile\";\nimport {useStore} from \"../../app/stores/Store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n    //reason for bringing in userStore is that we don't want to show follow button if we're on the user's on profile\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    //so we need to run a check as to whether we're on our own profile\n    if (userStore.user?.username === profile.username) return null;\n    \n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        //if we're following the user already we want to unfollow so set to false; and vice versa, true\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n    \n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button fluid \n                        color='teal' \n                        content={profile.following ? 'Following' : 'Not Following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button fluid\n                        basic\n                        color={profile.following ? 'red' : 'green'}\n                        content={profile.following ? 'Unfollow' : 'Follow'}\n                        loading={loading}\n                        onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n    }\n)","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/Profile';\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>User bio goes here</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/Profile';\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n    attendees: Profile[]\n}\n\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\n    const styles = {\n        borderColor:'red',\n        borderWidth: 4\n    }\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                //need to give key here because Popup is first element in the attendees map\n                //moved marginRight to -7 because a weird line shows up after the right margin circle icon\n                <Popup \n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                tyle={{marginRight: -7}} \n                                size='mini' \n                                circular src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee}/>\n                    </Popup.Content>\n                </Popup>\n\n            ))}\n\n        </List>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, {  } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\n\ninterface Props {\n    activity: Activity\n}\n\n\nexport default observer(function ActivityListItem({activity}: Props)\n    {\n        \n        return(\n            <Segment.Group>\n                <Segment>\n                    {activity.isCancelled && \n                        <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\n                    }\n                    <Item.Group>\n                        <Item>\n                            <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\n                            <Item.Content>\n                                <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                    {activity.title}\n                                </Item.Header>\n                                <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                                {activity.isHost && (\n                                    <Item.Description>\n                                        <Label basic color='orange'>\n                                            You are hosting this activity\n                                        </Label>\n                                    </Item.Description>\n                                )}\n                                {activity.isGoing && !activity.isHost && (\n                                    <Item.Description>\n                                        <Label basic color='green'>\n                                            You are going to this activity\n                                        </Label>\n                                    </Item.Description>\n                                )}\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n                <Segment>\n                    <span>\n                        <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        <Icon name='marker'/> {activity.venue}\n                    </span>\n                </Segment>\n                <Segment secondary>\n                    <ActivityListItemAttendee attendees={activity.attendees!}/>\n                </Segment>\n                <Segment clearing>\n                    <span>{activity.description}</span>\n                    <Button \n                        as={Link}\n                        to={`/activities/${activity.id}`}\n                        color='teal'\n                        floated='right'\n                        content='View Activity'\n                    />\n                </Segment>\n            </Segment.Group>\n        )\n    })\n\n","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/Store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}  \n                </Fragment>\n                \n            ))}\n        </>\n\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\n//trying to match format of ActivityListItem as much as possible\n//instead of displaying a full-page loader, displays placeholders\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport {Grid, Loader } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/Store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport {PagingParams} from \"../../../app/models/Pagination\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\nexport default observer(function ActivityDashboard() {\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n    \n    //helper function\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        //don't need to add parameters to loadActivities because axios handles them from the store\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n      if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n  \n  \n    \n    //infinite scroller!\n    //need to cast pagination as bool with !!\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})\n\n/*function setPagingParams(arg0: any) {\n    throw new Error('Function not implemented.');\n}*/\n","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import {ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Button, Form, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from '../../app/stores/Store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n        initialValues={{email: '', password: '', error: null}}\n        onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n            setErrors({error: \"Invalid email or password.\"}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to SchedulerMike!' color='teal' textAlign='center'/>\n                    <MyTextInput placeholder='Email' name='email' />\n                    <MyTextInput placeholder='Password' name='password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => <Label style={{marginBottom:10}} basic color='red'\n                        content={errors.error}/>} \n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import {ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Button, Form, Header } from 'semantic-ui-react';\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from '../../app/stores/Store';\nimport * as Yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up for Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextInput placeholder='Username' name='username' />\n                    <MyTextInput placeholder='Email' name='email' />\n                    <MyTextInput placeholder='Password' name='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() => <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                            loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Header, Segment, Image, Divider } from 'semantic-ui-react';\nimport {useStore} from \"../../app/stores/Store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size ='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                    SchedulerMike\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to SchedulerMike!' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} to='/login' size='huge' inverted>\n                        Login\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} to='/login' size='huge' inverted>\n                            Register\n                        </Button>\n                        <Divider horizontal inverted>Or </Divider>\n                        <Button\n                            loading={userStore.fbLoading}\n                            size='huge'\n                            inverted\n                            color='facebook'\n                            content='Login with Facebook'\n                            onClick={userStore.facebookLogin}\n                        />\n                    </>\n                        )}\n            </Container>\n        </Segment>\n\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content = {content} />\n        </Dimmer>\n    )\n}\n","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n];","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react'\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react'\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/Store';\nimport { v4 as uuid } from \"uuid\";\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport {categoryOptions} from \"../../../app/common/options/CategoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport {ActivityFormValues} from \"../../../app/models/activity\";\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, \n        loadActivity, loadingInitial } = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n    \n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required.'),\n        description: Yup.string().required('The activity description is required.'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required.').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...'/>\n\n    return (\n        <Segment clearing>\n            <Header content='Activity details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} onSubmit={values => handleFormSubmit(values) }>\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                    <Form className = 'ui form' onSubmit={handleSubmit} autoComplete = 'off' >\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput placeholder='Category' name='category'  options={categoryOptions}/>\n                        <MyDateInput \n                            placeholderText='Date' \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' \n                            positive type='submit' \n                            content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport {useStore} from \"../../../app/stores/Store\";\nimport { Link } from 'react-router-dom';\nimport { Formik, Form, Field, FieldProps } from 'formik';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore();\n    \n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId)\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n        \n    }, [commentStore, activityId])\n    \n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, {resetForm}) => commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{body: ''}}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({isSubmitting, isValid, handleSubmit}) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{position: 'relative'}}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comments (Enter to submit, SHIFT + Enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport {useStore} from \"../../../app/stores/Store\";\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\n                        ribbon color='red' content='Canceled'/>}\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                <>\n                    <Button\n                         color={activity.isCancelled ? 'green' : 'red'}\n                         floated='left'\n                         basic\n                         content={activity.isCancelled ? 'Reactivate activity' : 'Cancel activity'}\n                         onClick={cancelActivityToggle}\n                         loading={loading}\n                     />\n                    {activity.isHost ? (\n                        <Button as={Link} \n                                to={`/manage/${activity.id}`} \n                                color='orange' \n                                floated='right'\n                                disabled={activity.isCancelled}>\n                            Manage Event\n                        </Button>\n                    ) : activity.isGoing ? (\n                        <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>    \n                    ) : (\n                        <Button disabled={activity.isCancelled}\n                                loading={loading} \n                                onClick={updateAttendance} \n                                color='teal'>\n                                Join Activity\n                        </Button>\n                    )}\n                </>\n            </Segment>\n        </Segment.Group>\n    )\n})\n\n\n\n\n\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity;\n    \n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    //checks if no attendees\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username && \n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following && \n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/Store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        //flushes selected activity from memory when we're done\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from \"./ValidationErrors\";\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Container, Header, Segment } from 'semantic-ui-react';\nimport {useStore} from \"../../app/stores/Store\";\n\nexport default observer (function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code> \n                </Segment>}\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport {useStore} from \"../../stores/Store\";\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n    \n    return(\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport {Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\n//use of \"export default\" so the function can be used inside our PhotoUploadWidget\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n    \n    //because we are using useCallback, the callback function takes a dependency array\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, {useEffect, useState } from 'react';\nimport {Button, Grid, Header} from 'semantic-ui-react';\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport { Cropper } from 'react-cropper';\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    //empty array ([]) in useState to avoid null error for Step 2\n    //gave useState <any> type to avoid \"preview\" error of not applicable on \"never\" type\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n    \n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n    \n    //useEffect() cleans up cropper component after its been disposed of\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n    \n    //12 columns in 16-column grid w/ 1-column separators (15/16 in total)\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize Image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview and Upload' />\n                {files && files.length > 0 && \n                <>\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden' }}/>\n                    <Button.Group widths={2}>\n                        <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                        <Button diabled={loading} onClick={() => setFiles([])} icon='close'/>\n                    </Button.Group>\n                </>}\n                \n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, {SyntheticEvent, useState } from 'react';\nimport {Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport {Photo, Profile} from \"../../app/models/Profile\";\nimport {useStore} from \"../../app/stores/Store\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n    //gets the currently logged in user from the store\n    const {profileStore: {isCurrentUser, uploadPhoto, \n        uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n    \n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n    \n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n    \n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n    \n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' \n                                basic \n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group fluid widths={2}>\n                                                <Button \n                                                    basic \n                                                    color='green' \n                                                    content='Main'\n                                                    name={'main' + photo.id}\n                                                    //so user doesn't set main photo to something that is already their main photo\n                                                    disabled={photo.isMain}\n                                                    loading={target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button basic \n                                                        color='red'\n                                                        icon='trash'\n                                                        name={photo.id}\n                                                        disabled={photo.isMain}\n                                                        loading={target === photo.id && loading}\n                                                        onClick={e => handleDeletePhoto(photo, e)}\n                                                />\n                                            </Button.Group>    \n                                            )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n            <Header icon='image' content='Photos' />\n\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport {useStore} from \"../../app/stores/Store\";\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n    \n    return ( \n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' \n                            icon='user' \n                            content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} \n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile}/>\n                            ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, {SyntheticEvent, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\nimport { UserActivity } from \"../../app/models/Profile\";\nimport { format } from 'date-fns';\nimport {useStore} from \"../../app/stores/Store\";\n\n\nconst panes = [\n    { menuItem: 'Future Events', pane: {key: 'future'} },\n    { menuItem: 'Past Events', pane: {key: 'past'}},\n    { menuItem: 'Hosting', pane: {key: 'hosting'}}\n];\n\nexport default observer(function ProfileActivities() {\n    const {profileStore} = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities,\n    } = profileStore;\n    \n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n    \n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n    \n    return (\n        <Tab.Pane loading={loadingActivities}>\n           <Grid>\n               <Grid.Column width={16}>\n                   <Header floated='left' icon='calendar' content={'Activities'} />\n               </Grid.Column>\n               <Grid.Column width={16}>\n                   <Tab\n                       panes={panes}\n                       menu={{ secondary: true, pointing: true}}\n                       onTabChange={(e, data) => handleTabChange(e, data)}\n                   />\n                   <br />\n                   <Card.Group itemsPerRow={4}>\n                       {userActivities.map((activity: UserActivity) => (\n                           <Card\n                               as={Link}\n                               to={`/activities/${activity.id}`}\n                               key={activity.id}\n                           >\n                               <Image\n                                   src={`/assets/categoryImages/${activity.category}.jpg`}\n                                   style={{ minHeight: 100, objectFit: 'cover'}}\n                               />\n                               <Card.Content>\n                                   <Card.Header textAlign='center'>\n                                       {activity.title}\n                                   </Card.Header>\n                                   <Card.Meta textAlign='center'>\n                                       <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                       <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                   </Card.Meta>\n                               </Card.Content>\n                           </Card>\n                       ))}\n                   </Card.Group>\n               </Grid.Column>\n           </Grid> \n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport ProfilePhotos from \"./ProfilePhotos\";\nimport {Profile} from \"../../app/models/Profile\";\nimport { observer } from 'mobx-react-lite';\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport {useStore} from \"../../app/stores/Store\";\nimport ProfileActivities from \"./ProfileActivities\";\n\ninterface Props {\n    profile: Profile;\n}\n\n//have to add observer to anything we get from a store\nexport default observer(function ProfileContent({profile}: Props) {\n    const panes = [\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n    \n    const {profileStore} = useStore();\n    \n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/Profile';\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n}\n\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from \"./ProfileHeader\";\nimport {useStore} from \"../../app/stores/Store\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n    \n    //useEffect() to call loadProfile method when this component loads\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        } \n    }, [loadProfile, username, setActiveTab])\n    \n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n    \n    //need {profile && in order to get rid of what if profile=null warning\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile && \n                <>\n                    <ProfileHeader profile={profile}/>\n                    <ProfileContent profile={profile}/>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from \"react\";\nimport {Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport {useStore} from \"../stores/Store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n    \n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            //if they're not logged in, they get sent back to home page to protect our routes\n            //note this protection is only on server side, not client side\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './navbar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivitiesDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestError from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport {useStore} from \"../stores/Store\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from \"./PrivateRoute\";\n\n\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n  \n  useEffect(() => {\n      if (commonStore.token) {\n          userStore.getUser().finally(() => commonStore.setAppLoaded());\n      } else {\n          userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n          commonStore.setAppLoaded();\n      }\n  }, [commonStore, userStore])\n    \n    if (!commonStore.appLoaded) return <LoadingComponent content={'Loading...'}/>\n    \n\n  return (\n    <>\n        <ToastContainer position='bottom-right' hideProgressBar />\n        <ModalContainer /> \n      <Route exact path= '/' component={HomePage} /> \n      <Route \n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar/> \n            <Container style={{marginTop: '7em'}}> \n              <Switch>\n                  <PrivateRoute exact path= '/' component={HomePage} />\n                  <PrivateRoute exact path= '/activities' component={ActivityDashboard} />\n                  <PrivateRoute path= '/activities/:id' component={ActivityDetails} />\n                  <PrivateRoute key={location.key} path= {['/createActivity', '/manage/:id']} component={ActivityForm} />\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} /> \n                  <PrivateRoute path='/errors' component={TestError}  />\n                  <Route path='/server-error' component={ServerError}  />\n                  <PrivateRoute component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n      </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n","\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/Store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\n//react application contained in here.\nReactDOM.render(\n  <StoreContext.Provider value = {store}>\n    <Router history={history}>\n        <ScrollToTop />\n      <App />,\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}